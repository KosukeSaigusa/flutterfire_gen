// Mocks generated by Mockito 5.4.4 from annotations
// in flutterfire_gen/test/utils/dart_type_util_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i3;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i6;
import 'package:analyzer/dart/element/type.dart' as _i2;
import 'package:analyzer/dart/element/type_visitor.dart' as _i7;
import 'package:analyzer/src/generated/engine.dart' as _i5;
import 'package:analyzer/src/generated/source.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDartType_0 extends _i1.SmartFake implements _i2.DartType {
  _FakeDartType_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceElement_1 extends _i1.SmartFake
    implements _i3.InterfaceElement {
  _FakeInterfaceElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceType_2 extends _i1.SmartFake implements _i2.InterfaceType {
  _FakeInterfaceType_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompilationUnitElement_3 extends _i1.SmartFake
    implements _i3.CompilationUnitElement {
  _FakeCompilationUnitElement_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_4 extends _i1.SmartFake implements _i3.Element {
  _FakeElement_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLibraryElement_5 extends _i1.SmartFake
    implements _i3.LibraryElement {
  _FakeLibraryElement_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSource_6 extends _i1.SmartFake implements _i4.Source {
  _FakeSource_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnalysisContext_7 extends _i1.SmartFake
    implements _i5.AnalysisContext {
  _FakeAnalysisContext_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElementKind_8 extends _i1.SmartFake implements _i3.ElementKind {
  _FakeElementKind_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DynamicType].
///
/// See the documentation for Mockito's code generation for more information.
class MockDynamicType extends _i1.Mock implements _i2.DynamicType {
  MockDynamicType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);
  @override
  bool get isDynamic => (super.noSuchMethod(
        Invocation.getter(#isDynamic),
        returnValue: false,
      ) as bool);
  @override
  bool get isVoid => (super.noSuchMethod(
        Invocation.getter(#isVoid),
        returnValue: false,
      ) as bool);
  @override
  _i6.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i6.NullabilitySuffix.question,
      ) as _i6.NullabilitySuffix);
  @override
  R accept<R>(_i7.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i8.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);
  @override
  R acceptWithArgument<R, A>(
    _i7.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i8.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);
  @override
  _i2.InterfaceType? asInstanceOf(_i3.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i2.InterfaceType?);
  @override
  String getDisplayString({required bool? withNullability}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
  @override
  _i2.DartType resolveToBound(_i2.DartType? objectType) => (super.noSuchMethod(
        Invocation.method(
          #resolveToBound,
          [objectType],
        ),
        returnValue: _FakeDartType_0(
          this,
          Invocation.method(
            #resolveToBound,
            [objectType],
          ),
        ),
      ) as _i2.DartType);
}

/// A class which mocks [InterfaceType].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterfaceType extends _i1.Mock implements _i2.InterfaceType {
  MockInterfaceType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.PropertyAccessorElement> get accessors => (super.noSuchMethod(
        Invocation.getter(#accessors),
        returnValue: <_i3.PropertyAccessorElement>[],
      ) as List<_i3.PropertyAccessorElement>);
  @override
  List<_i2.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  List<_i3.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i3.ConstructorElement>[],
      ) as List<_i3.ConstructorElement>);
  @override
  _i3.InterfaceElement get element => (super.noSuchMethod(
        Invocation.getter(#element),
        returnValue: _FakeInterfaceElement_1(
          this,
          Invocation.getter(#element),
        ),
      ) as _i3.InterfaceElement);
  @override
  _i3.InterfaceElement get element2 => (super.noSuchMethod(
        Invocation.getter(#element2),
        returnValue: _FakeInterfaceElement_1(
          this,
          Invocation.getter(#element2),
        ),
      ) as _i3.InterfaceElement);
  @override
  List<_i2.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  List<_i3.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i3.MethodElement>[],
      ) as List<_i3.MethodElement>);
  @override
  List<_i2.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  List<_i2.InterfaceType> get superclassConstraints => (super.noSuchMethod(
        Invocation.getter(#superclassConstraints),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  List<_i2.DartType> get typeArguments => (super.noSuchMethod(
        Invocation.getter(#typeArguments),
        returnValue: <_i2.DartType>[],
      ) as List<_i2.DartType>);
  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);
  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);
  @override
  bool get isDynamic => (super.noSuchMethod(
        Invocation.getter(#isDynamic),
        returnValue: false,
      ) as bool);
  @override
  bool get isVoid => (super.noSuchMethod(
        Invocation.getter(#isVoid),
        returnValue: false,
      ) as bool);
  @override
  _i6.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i6.NullabilitySuffix.question,
      ) as _i6.NullabilitySuffix);
  @override
  _i3.PropertyAccessorElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i3.MethodElement?);
  @override
  _i3.PropertyAccessorElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.ConstructorElement? lookUpConstructor(
    String? name,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConstructor,
        [
          name,
          library,
        ],
      )) as _i3.ConstructorElement?);
  @override
  _i3.PropertyAccessorElement? lookUpGetter2(
    String? name,
    _i3.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter2,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.MethodElement? lookUpMethod2(
    String? name,
    _i3.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod2,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i3.MethodElement?);
  @override
  _i3.PropertyAccessorElement? lookUpSetter2(
    String? name,
    _i3.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter2,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i3.PropertyAccessorElement?);
  @override
  R accept<R>(_i7.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i8.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);
  @override
  R acceptWithArgument<R, A>(
    _i7.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i8.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);
  @override
  _i2.InterfaceType? asInstanceOf(_i3.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i2.InterfaceType?);
  @override
  String getDisplayString({required bool? withNullability}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
  @override
  _i2.DartType resolveToBound(_i2.DartType? objectType) => (super.noSuchMethod(
        Invocation.method(
          #resolveToBound,
          [objectType],
        ),
        returnValue: _FakeDartType_0(
          this,
          Invocation.method(
            #resolveToBound,
            [objectType],
          ),
        ),
      ) as _i2.DartType);
}

/// A class which mocks [InterfaceElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterfaceElement extends _i1.Mock implements _i3.InterfaceElement {
  MockInterfaceElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  _i2.InterfaceType get thisType => (super.noSuchMethod(
        Invocation.getter(#thisType),
        returnValue: _FakeInterfaceType_2(
          this,
          Invocation.getter(#thisType),
        ),
      ) as _i2.InterfaceType);
  @override
  List<_i3.PropertyAccessorElement> get accessors => (super.noSuchMethod(
        Invocation.getter(#accessors),
        returnValue: <_i3.PropertyAccessorElement>[],
      ) as List<_i3.PropertyAccessorElement>);
  @override
  List<_i3.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i3.ConstructorElement>[],
      ) as List<_i3.ConstructorElement>);
  @override
  _i3.CompilationUnitElement get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeCompilationUnitElement_3(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i3.CompilationUnitElement);
  @override
  _i3.CompilationUnitElement get enclosingElement3 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement3),
        returnValue: _FakeCompilationUnitElement_3(
          this,
          Invocation.getter(#enclosingElement3),
        ),
      ) as _i3.CompilationUnitElement);
  @override
  List<_i3.FieldElement> get fields => (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <_i3.FieldElement>[],
      ) as List<_i3.FieldElement>);
  @override
  List<_i2.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  List<_i3.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i3.MethodElement>[],
      ) as List<_i3.MethodElement>);
  @override
  List<_i2.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i2.InterfaceType>[],
      ) as List<_i2.InterfaceType>);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);
  @override
  bool get isSimplyBounded => (super.noSuchMethod(
        Invocation.getter(#isSimplyBounded),
        returnValue: false,
      ) as bool);
  @override
  List<_i3.TypeParameterElement> get typeParameters => (super.noSuchMethod(
        Invocation.getter(#typeParameters),
        returnValue: <_i3.TypeParameterElement>[],
      ) as List<_i3.TypeParameterElement>);
  @override
  _i3.Element get declaration => (super.noSuchMethod(
        Invocation.getter(#declaration),
        returnValue: _FakeElement_4(
          this,
          Invocation.getter(#declaration),
        ),
      ) as _i3.Element);
  @override
  _i3.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_5(
          this,
          Invocation.getter(#library),
        ),
      ) as _i3.LibraryElement);
  @override
  _i4.Source get librarySource => (super.noSuchMethod(
        Invocation.getter(#librarySource),
        returnValue: _FakeSource_6(
          this,
          Invocation.getter(#librarySource),
        ),
      ) as _i4.Source);
  @override
  _i4.Source get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeSource_6(
          this,
          Invocation.getter(#source),
        ),
      ) as _i4.Source);
  @override
  List<_i3.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i3.Element>[],
      ) as List<_i3.Element>);
  @override
  _i5.AnalysisContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeAnalysisContext_7(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.AnalysisContext);
  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#displayName),
        ),
      ) as String);
  @override
  bool get hasAlwaysThrows => (super.noSuchMethod(
        Invocation.getter(#hasAlwaysThrows),
        returnValue: false,
      ) as bool);
  @override
  bool get hasDeprecated => (super.noSuchMethod(
        Invocation.getter(#hasDeprecated),
        returnValue: false,
      ) as bool);
  @override
  bool get hasDoNotStore => (super.noSuchMethod(
        Invocation.getter(#hasDoNotStore),
        returnValue: false,
      ) as bool);
  @override
  bool get hasFactory => (super.noSuchMethod(
        Invocation.getter(#hasFactory),
        returnValue: false,
      ) as bool);
  @override
  bool get hasInternal => (super.noSuchMethod(
        Invocation.getter(#hasInternal),
        returnValue: false,
      ) as bool);
  @override
  bool get hasIsTest => (super.noSuchMethod(
        Invocation.getter(#hasIsTest),
        returnValue: false,
      ) as bool);
  @override
  bool get hasIsTestGroup => (super.noSuchMethod(
        Invocation.getter(#hasIsTestGroup),
        returnValue: false,
      ) as bool);
  @override
  bool get hasJS => (super.noSuchMethod(
        Invocation.getter(#hasJS),
        returnValue: false,
      ) as bool);
  @override
  bool get hasLiteral => (super.noSuchMethod(
        Invocation.getter(#hasLiteral),
        returnValue: false,
      ) as bool);
  @override
  bool get hasMustBeOverridden => (super.noSuchMethod(
        Invocation.getter(#hasMustBeOverridden),
        returnValue: false,
      ) as bool);
  @override
  bool get hasMustCallSuper => (super.noSuchMethod(
        Invocation.getter(#hasMustCallSuper),
        returnValue: false,
      ) as bool);
  @override
  bool get hasNonVirtual => (super.noSuchMethod(
        Invocation.getter(#hasNonVirtual),
        returnValue: false,
      ) as bool);
  @override
  bool get hasOptionalTypeArgs => (super.noSuchMethod(
        Invocation.getter(#hasOptionalTypeArgs),
        returnValue: false,
      ) as bool);
  @override
  bool get hasOverride => (super.noSuchMethod(
        Invocation.getter(#hasOverride),
        returnValue: false,
      ) as bool);
  @override
  bool get hasProtected => (super.noSuchMethod(
        Invocation.getter(#hasProtected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasReopen => (super.noSuchMethod(
        Invocation.getter(#hasReopen),
        returnValue: false,
      ) as bool);
  @override
  bool get hasRequired => (super.noSuchMethod(
        Invocation.getter(#hasRequired),
        returnValue: false,
      ) as bool);
  @override
  bool get hasSealed => (super.noSuchMethod(
        Invocation.getter(#hasSealed),
        returnValue: false,
      ) as bool);
  @override
  bool get hasUseResult => (super.noSuchMethod(
        Invocation.getter(#hasUseResult),
        returnValue: false,
      ) as bool);
  @override
  bool get hasVisibleForOverriding => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForOverriding),
        returnValue: false,
      ) as bool);
  @override
  bool get hasVisibleForTemplate => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTemplate),
        returnValue: false,
      ) as bool);
  @override
  bool get hasVisibleForTesting => (super.noSuchMethod(
        Invocation.getter(#hasVisibleForTesting),
        returnValue: false,
      ) as bool);
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
      ) as bool);
  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
      ) as bool);
  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
      ) as bool);
  @override
  _i3.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_8(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i3.ElementKind);
  @override
  List<_i3.ElementAnnotation> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <_i3.ElementAnnotation>[],
      ) as List<_i3.ElementAnnotation>);
  @override
  int get nameLength => (super.noSuchMethod(
        Invocation.getter(#nameLength),
        returnValue: 0,
      ) as int);
  @override
  int get nameOffset => (super.noSuchMethod(
        Invocation.getter(#nameOffset),
        returnValue: 0,
      ) as int);
  @override
  _i3.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_4(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i3.Element);
  @override
  _i3.FieldElement? getField(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField,
        [name],
      )) as _i3.FieldElement?);
  @override
  _i3.PropertyAccessorElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i3.MethodElement?);
  @override
  _i3.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getNamedConstructor,
        [name],
      )) as _i3.ConstructorElement?);
  @override
  _i3.PropertyAccessorElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i2.InterfaceType instantiate({
    required List<_i2.DartType>? typeArguments,
    required _i6.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #instantiate,
          [],
          {
            #typeArguments: typeArguments,
            #nullabilitySuffix: nullabilitySuffix,
          },
        ),
        returnValue: _FakeInterfaceType_2(
          this,
          Invocation.method(
            #instantiate,
            [],
            {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            },
          ),
        ),
      ) as _i2.InterfaceType);
  @override
  _i3.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConcreteMethod,
        [
          methodName,
          library,
        ],
      )) as _i3.MethodElement?);
  @override
  _i3.PropertyAccessorElement? lookUpGetter(
    String? getterName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter,
        [
          getterName,
          library,
        ],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.PropertyAccessorElement? lookUpInheritedConcreteGetter(
    String? getterName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedConcreteGetter,
        [
          getterName,
          library,
        ],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.MethodElement? lookUpInheritedConcreteMethod(
    String? methodName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedConcreteMethod,
        [
          methodName,
          library,
        ],
      )) as _i3.MethodElement?);
  @override
  _i3.PropertyAccessorElement? lookUpInheritedConcreteSetter(
    String? setterName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedConcreteSetter,
        [
          setterName,
          library,
        ],
      )) as _i3.PropertyAccessorElement?);
  @override
  _i3.MethodElement? lookUpInheritedMethod(
    String? methodName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedMethod,
        [
          methodName,
          library,
        ],
      )) as _i3.MethodElement?);
  @override
  _i3.MethodElement? lookUpMethod(
    String? methodName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod,
        [
          methodName,
          library,
        ],
      )) as _i3.MethodElement?);
  @override
  _i3.PropertyAccessorElement? lookUpSetter(
    String? setterName,
    _i3.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter,
        [
          setterName,
          library,
        ],
      )) as _i3.PropertyAccessorElement?);
  @override
  T? accept<T>(_i3.ElementVisitor<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept,
        [visitor],
      )) as T?);
  @override
  String getDisplayString({
    required bool? withNullability,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {
            #withNullability: withNullability,
            #multiline: multiline,
          },
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {
              #withNullability: withNullability,
              #multiline: multiline,
            },
          ),
        ),
      ) as String);
  @override
  String getExtendedDisplayName(String? shortName) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [shortName],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName,
            [shortName],
          ),
        ),
      ) as String);
  @override
  bool isAccessibleIn(_i3.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isAccessibleIn2(_i3.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);
  @override
  E? thisOrAncestorMatching<E extends _i3.Element>(
          bool Function(_i3.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching,
        [predicate],
      )) as E?);
  @override
  void visitChildren(_i3.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
}
